version: "3.8"

services:
  db:
    image: postgis/postgis:13-3.1
    container_name: db
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_USER: ${DB_USER:-portal_user} #TODO Use environment variable
      # POSTGRES_USER: portal_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-portal_password}
      POSTGRES_DB: ${DB_NAME:-portal_db}
      # POSTGRES_PASSWORD: portal_password
      # POSTGRES_DB: portal_db
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U portal_user -d portal_db"]
      # test: ["CMD-SHELL", "pg_isready -U portal_user -d portal_db"]
      # ["CMD-SHELL", "pg_isready -U ${DB_USER:-portal_user} -d ${DB_NAME:-portal_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        - UID=${UID:-1000}
        - GID=${GID:-1000}
    container_name: lausanne_backend
    # For development, mount code for hot-reloading with Django's dev server
    command: python manage.py runserver 0.0.0.0:8002
    # For production-like with Gunicorn and entrypoint.sh:
    entrypoint: /app/entrypoint.sh
    volumes:
      - ./backend:/app
      - ./backend/staticfiles:/app/staticfiles
      # - static_volume:/app/staticfiles # If collecting static files to a volume
      # - media_volume:/app/mediafiles   # If handling media files
    ports:
      - "8002:8002"
    environment:
      - GDAL_LIBRARY_PATH=/usr/lib/libgdal.so
      - GEOS_LIBRARY_PATH=/usr/lib/libgeos_c.so
      - DJANGO_SETTINGS_MODULE=backend.settings
      - SECRET_KEY=${DJANGO_SECRET_KEY:-your_default_secret_key_for_dev} # Use .env
      - DEBUG=${DJANGO_DEBUG:-1}
      - DB_HOST=db
      # - DB_NAME=${DB_NAME:-portal_db}
      - DB_NAME=portal_db
      - DB_USER=portal_user
      - DB_PASSWORD=portal_password
      - DB_PORT=5432
      - CORS_ALLOWED_ORIGINS=http://localhost:5173,http://127.0.0.1:5173
      # - GUNICORN_WORKERS=3
      # - GUNICORN_TIMEOUT=120
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        REACT_APP_API_URL: ${REACT_APP_API_URL:-/api}
    container_name: lausanne_frontend
    # For development with React Dev Server & hot-reloading:
    # This bypasses the Nginx setup in frontend/Dockerfile and runs `npm start`
    command: npm run dev -- --host
    volumes:
      - ./frontend:/app # Mount local frontend code
      - /app/node_modules # Prevent host node_modules from overwriting container's
    ports:
      - "5173:5173" # Map container's 3000 (React dev server) to host's 5173 HOST:CONTAINER
    # For production-like build served by Nginx (as defined in frontend/Dockerfile)
    # ports:
    #   - "5173:80" # Nginx in container runs on 80, map to 5173 on host
    environment:
      - NODE_ENV=development # 'development' or 'production'
      # REACT_APP_API_URL is now a build arg for the Dockerfile
      - CHOKIDAR_USEPOLLING=true # Fix file watching in Docker
      - REACT_APP_API_URL=${REACT_APP_API_URL:-http://backend:8002/api}
    depends_on:
      - backend
    restart: unless-stopped

volumes:
  postgres_data:
  # static_volume: # If you manage static files via Docker volumes
  # media_volume:  # If you manage media files via Docker volumes
